---
layout: post
title:  "The Calendar Puzzle continued - Z3"
date:   2025-01-22 19:00:00 +0530
categories: puzzle
---

This is a follow-up to the [previous post](https://metterklume.github.io/2024/12/24/calendar-puzzle.html). 

Recall that we condensed the constraints from the puzzle into a single array of 1s and 0s, **M**. A solution to the puzzle being a subset of rows such that:
- No two rows have a 1 in the same column.
- Taken together, the rows cover the columns of *M* i.e. each column has a matching row with a 1 in the respective position.

To find such a subset, we used backtracking and had to sweat a bit to optimise the search.

Instead, we might [stand on the the shoulders of giants](https://en.wikipedia.org/wiki/Standing_on_the_shoulders_of_giants) and use a SAT solver. 

A SAT solver is a program that takes a boolean formula and either finds a solution or proves that no solution exists. 
Formulas are built from Boolean variables, which can take values 0 or 1. The logical operators are AND, OR and NOT. Z3 actually goes far beyond in solving problems with integers, and even real numbers. But SAT is all we need. 

I chose [Z3](https://github.com/Z3Prover/z3) as I was vaguely familiar with the name.
Skimming through this [tutorial](https://gitlab.caltech.edu/cs11puzzles-21wi/documents/-/blob/master/notes/z3py-intro-cont/z3py-intro-cont.md), I came up with:

{% highlight python %}
#Assume that M and keep_cols have been constructed as in the previous post.
#keep_cols is a boolean array 

from z3 import *
#A list of boolean variables, one for each row. True means that the row is selected in the solution.
rowz = Bools(['row_%d' % i for i in range(M.shape[0])])

s = Solver()
for col in range(M.shape[1]):
    if not keep_cols[col]:
        continue

    #For each kept column, require exactly one intersecting row to be selected
    constraint = [(rowz[r],1) for r in np.where(M[:,col])[0]]
    s.add(PbEq(constraint, 1))

{% endhighlight %}

*PbEq* is an (undocumented!) feature in Z3 that allows one to demand *exactly only one of the following variables must be True*, in a concise manner. In full generality, it sets a weighted sum of boolean variables equal to a constant. In our case the constant and weights are all 1. Pb apparently stands for *Pseudo-Boolean*.

In Z3 a solution is also called a *model*. We check if the constraints are satisfiable and print the model.
{% highlight python %}
print(s.check()) #creates the model automatically
print(s.model())

>>>sat
>>>[row_516 = False,
    row_620 = False,
    row_197 = False,
    row_257 = False,
    ...]

{% endhighlight %}

That's it, we have a solution! All we did was set the problem up and the SAT solver did the rest.

{% highlight python %}
solution = [i for i in range(M.shape[0]) if m.eval(rowz[i])]
plot_solution(M, solution, initial_grid)
{% endhighlight %}

What if we want all solutions not just the first one that Z3 stumbled upon? This is where it gets interesting.
Stackoverflowing a bit, I found [two answers](https://stackoverflow.com/questions/11867611/z3py-checking-all-solutions-for-equation). The naive way keeps adding each solution to the constraints as it is found, 
effectively saying "show me something I haven't seen before". The sophisticated approach splits the search space, fixing 
some variables and exploring the rest. It also uses coroutines - a fairly advanced feature of Python that is admittedly a bit out of my comfort zone. Both are described in this comprehensive (and intimidating)
[guide](https://theory.stanford.edu/%7Enikolaj/programmingz3.html#sec-blocking-evaluations) 
I also learned that the Z3 solver maintains state between calls that ought to enable incremental search, instead of starting over from scratch each time. 
        
<details>
<summary>Naive</summary>
{% highlight python %}
def block_model(s, terms):
    """
    Add a constraint that blocks the current model (solution). 
    The next call to check() will return a different solution.
    """
    m = s.model()
    s.add(Or([t != m.eval(t, model_completion=True) for t in terms]))

def all_solutions(s, terms):
    while sat == s.check():
        m = s.model()
        sol = [i for i in range(M.shape[0]) if m.eval(rowz[i])]
        print(sol)
        block_model(s, terms)

{% endhighlight %}
</details>

<details>
<summary>Sophisticated way with coroutines</summary>
{% highlight python %}
def all_smt(s, initial_terms):
    def block_term(s, m, t):
        s.add(t != m.eval(t, model_completion=True))
    def fix_term(s, m, t):
        s.add(t == m.eval(t, model_completion=True))
    def all_smt_rec(terms):
        if sat == s.check():
           m = s.model()
           yield m
           for i in range(len(terms)):
               s.push()
               block_term(s, m, terms[i])
               for j in range(i):
                   fix_term(s, m, terms[j])
               yield from all_smt_rec(terms[i:])
               s.pop()   
    yield from all_smt_rec(list(initial_terms))


ss = all_smt(s,rowz)
m = next(ss, None)
while m:
    sol = [i for i in range(M.shape[0]) if m.eval(rowz[i])]
    print(sol)
    m = next(ss, None)
{% endhighlight %}
</details>

Now comes the surprise.
```
Time to find all 92 solutions for Dec 25 in the calendar

Naive: 6.7s
Smarter: 10min 8s
```

The simple way is about 10x faster. Why? You tell me. 